from pySDC.core.Hooks import hooks
from pySDC.implementations.controller_classes.controller_nonMPI import controller_nonMPI


class approx_solution_hook(hooks):
    """
    Hook class to add the approximate solution generated by the sweeper 
    """

    def __init__(self):
        super(approx_solution_hook, self).__init__()
        self.uex = None

    def pre_step(self, step, level_number):
        """
        Default routine called before each step
        Args:
            step: the current step
            level_number: the current level number
        """
        super(approx_solution_hook, self).pre_step(step, level_number)
        # TODO: don't think there is anything to do pre-step. Only storing the approx. solution which first needs to be generated. 

    def post_step(self, step, level_number):
        """
        Default routine called after each step
        Args:
            step: the current step
            level_number: the current level number
        """

        super(approx_solution_hook, self).post_step(step, level_number)

        # some abbreviations
        L = step.levels[level_number]

        # TODO: is it really necessary to recompute the end point? Hasn't this been done already? 
        L.sweep.compute_end_point()

        self.add_to_stats(
            process=step.status.slot,
            time=L.time + L.dt,
            level=L.level_index,
            iter=step.status.iter,
            sweep=L.status.sweep,
            type='approx_solution_hook',
            value=L.uend,
        )
